<style>
<!--
BODY{FONT-FAMILY: 宋体; FONT-SIZE: 12.6px;
SCROLLBAR-HIGHLIGHT-COLOR: buttonface;
SCROLLBAR-SHADOW-COLOR: buttonface;
SCROLLBAR-3DLIGHT-COLOR: buttonhighlight;
SCROLLBAR-TRACK-COLOR: #eeeeee;
SCROLLBAR-DARKSHADOW-COLOR: buttonshadow}
td,form,select {FONT-SIZE: 12px; LINE-HEIGHT: 20px}
input {FONT-SIZE: 12px; BORDER: #000000 1px solid;height: 18px; BACKGROUND-color: #f7f7ff; COLOR: #000000;}
.small {FONT-SIZE: 1px; LINE-HEIGHT: 1px}
.mid {FONT-SIZE: 12px;LINE-HEIGHT: 20px}
A:active {COLOR: #ff0000; TEXT-DECORATION: none}
A:hover {COLOR: #ff0000; TEXT-DECORATION: underline}
A:link {COLOR: #000000; TEXT-DECORATION: none}
A:visited {COLOR: #000000; TEXT-DECORATION: none}
-->
</style>
 
<html>
<head>
<title>仲夏夜--js特效--时间跳动器</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<LINK href="css/the9.css" 
rel=stylesheet type=text/css>
<style type="text/css">
<!--
.zf {  border: #999999; border-style: solid; border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px}
-->
</style>
<script src="ad.js"></script>
</head>
<body bgcolor="#ffffff" onLoad='wClock = new clock ("wClock", document.clock.display); wButtons = new buttons ("wButtons", document.imastudios.buttons, 500, 1,-1); wButtons.stop(); wClock.sync ("wButtons", 1)'onUnload='wClock.stop(); wButtons.stop()' bgcolor="#FFFFFF">

<div align="center" > 
****************
    <tr> 
      **********
    </tr>
  </table>
  <table width="770" border="0" cellspacing="0" cellpadding="0" class="zf1">
    <tr>
      ***********
      ************
      *************
          <tr>
**************
 <SCRIPT LANGUAGE="JavaScript">
<!-- Begin
function addbookmark()
{
bookmarkurl="http://5icat.net.ru"
bookmarktitle="欢迎光临仲夏夜"
if (document.all)
window.external.AddFavorite(bookmarkurl,bookmarktitle)
}
//  End -->
</script>
***************</div></td>
          </tr>
          <tr>
            <td height="15"><div align="center"><img src="images/little2.gif" width="9" height="9">
 <span  onclick="var strHref=window.location.href;this.style.behavior='url(#default#homepage)';this.setHomePage('http://5icat.net.ru');"  style="CURSOR: hand"> 设为首页</a></span></div></td>
          </tr>
          <tr>
            <td><div align="center"><img src="images/little3.gif" width="9" height="9"><script src="../mail.js"></script></div></td>
          </tr>
        </table></td>
    </tr>
  </table>
   <table width="770" border="0" cellspacing="0" cellpadding="0" class="zf1">
    <tr> 
      <td  height="20"><table width="768" height="19" border="0" align="center" cellpadding="0" cellspacing="0" background="images/menubg.gif">    
          <script src="js.js"></script>
        </table></td>
    </tr>
  </table>
  <table width="770" border="0" cellspacing="0" cellpadding="0" bgcolor="#CCCCCC"class="zf1">
    <tr>
      <td class="zf3"><script language="JavaScript">
<!--
var enabled = 0; today = new Date();
var day; var date;
if(today.getDay()==0) day = "星期日"
if(today.getDay()==1) day = "星期一"
if(today.getDay()==2) day = "星期二"
if(today.getDay()==3) day = "星期三"
if(today.getDay()==4) day = "星期四"
if(today.getDay()==5) day = "星期五"
if(today.getDay()==6) day = "星期六"
date = "" + (today.getYear()) + "年" + (today.getMonth() + 1 ) + "月" + today.getDate() + "日  " + day +"";
document.write("<font color=black>" + date + "</font>");
-->
</script></td><td align=right>****************</td>
    </tr>
  </table>
<!--<IFRAME width=770 height=60 style="backgroundcolor: #CCCCCC" marginwidth="0" marginheight="0"  frameborder="0" scrolling="NO"   src="ad_top.htm"></IFRAME> -->
  <table width="770" border="0" cellspacing="0" cellpadding="0" >
    <tr>
      <td height="2"></td>
    </tr>
  </table>
  <table width="770" border="0" cellspacing="10" cellpadding="0" bgcolor="#CCCCCC">
    <tr> 
      <td bgcolor="#FFFFFF" height="501" valign="top"> 
        <div align="center"> <br>
          
          
 <table width="700" border="0" cellspacing="0" cellpadding="0">
            <tr>
              <td width="200">&nbsp;</td>
              <td> 
                <table width="300" border="1" cellspacing="0" cellpadding="0" align="center">
                  <tr> 
                    <td bgcolor="#CCCCCC" height="20" width="15">&nbsp;</td>
                    <td bgcolor="#999999" height="20" width="260"> 
					
                      <div align="center"><font color="#FFFFFF" size="3">时间跳动器</font></div>
                    </td>
                    <td bgcolor="#CCCCCC" height="20" width="17">&nbsp;</td>
                  </tr>
                </table>
              </td>
              <td width="10"><a href="UserCollect.asp?action=add&id=47" target="Collect">****************</a></td>
            </tr>
          </table>
          <br>
          <fieldset style="width:500;height:50"><legend>效果显示区</legend> 
         
<script language="JavaScript">
<!-- Hide this script from old browsers --

function modRange (value, min, max) {

    if (min == max) {

        return (min)

    }

    var low = Math.min (min, max)

    var high = Math.max (min, max)

    var range = high - low + 1

    var valOff = parseInt (value) - low

    var mod = range * Math.floor (valOff / range)

    result = low + valOff - mod

    if (result < low) {

        result += high

    }

    if (result > high) {

        result = low

    }

    return (result)

}

function array () {

    this[0] = null

}

function timerAppStart () {

    this.stop ()

    this.loop ()

}

function timerAppStop () {


    clearTimeout (this.timeout)

    this.timeout = null

}

function timerAppToggle () {

    if (this.timeout) {

        this.stop ()

    } else {

        this.start ()

    }

}

function timerAppLoop () {

    this.update ()

    command = this.name + '.loop()'

    for (var i = 0; i < this.syncCount; i++) {

        if (this.syncName[i] != '') {

            if (--this.syncCountdown[i] <= 0) {

                this.syncCountdown[i] = this.syncInterval[i]

                command += ';' + this.syncName[i] + '.update()'

            }

        }

    }

    this.timeout = setTimeout (command, this.interval)

}

function timerAppSetOutput (output) {

    if (! this.output) {

        this.output = output

    }

}

function timerAppSetInterval (interval) {

    if (interval) {

        var newInterval = parseInt (interval)

        if (newInterval > 0) {

            this.interval = newInterval

        } else {

            alert ('Interval value must be a positive number: ' + interval)

        }

    }

}

function timerAppSync (name, interval) {

    if (interval == null) {

        interval = 1

    }

    if (interval <= 0) {

        eval (this.name + '.unsync("' + name + '")')

        return

    }

    var newIndex = this.syncCount

    for (var i = 0; i < this.syncCount; i++) {

        if (this.syncName[i] == name) {

            newIndex = i

            break

        }

    }

    if (newIndex == this.syncCount) {

        this.syncCount++

    }

    this.syncInterval[newIndex] = interval

    this.syncCountdown[newIndex] = interval

    this.syncName[newIndex] = name

}

function timerAppUnsync (name) {

    for (var i = 0; i < this.syncCount; i++) {

        if (this.syncName[i] == name) {

            this.syncName[i] = ''

            if (i == (this.syncCount - 1)) {

                this.syncCount--

            }

        }

    }

}

function timerAppSetIncrement (increment) {

    if (increment) {

        var newIncrement = parseInt (increment)

//*Unix only*   if (! isNan (newIncrement)) {

        if (newIncrement != 0) {

            this.increment = newIncrement

        } else {

            alert ('Increment value must be a number: ' + increment)

        }

    }

}

function timerAppSetBounce (bounce) {

    if (bounce) {

        var newBounce = parseInt (bounce)

//*Unix only*   if (! isNan (newBounce)) {

        if (newBounce != 0) {

            this.bounce = newBounce

        } else {

            alert ('Bounce value must be a number: ' + bounce)

        }

    }

}

function timerAppSetOffset (offset) {

    if (offset) {

        var newOffset = parseInt (offset)

        if ((newOffset > 0)

            && (newOffset <= this.output.length)) {

            this.offset = newOffset

        } else {

            warnMessage = 'Value of offset must be a valid index (0 - '

                        + this.output.length + '): ' + offset

            alert (warnMessage)

        }

    }

}

function clock (name, output, interval) {

    // Initialize with default values

    this.name = name            // object name, needed for setTimeout

    this.output = null          // output area

    this.interval = 1000        // milliseconds

    this.timeout = null

    this.syncCount = 0

    this.syncName = new array ()

    this.syncInterval = new array ()

    this.syncCountdown = new array ()

    // Define object methods

    this.update = clockUpdate

    this.start = timerAppStart

    this.stop = timerAppStop

    this.toggle = timerAppToggle

    this.loop = timerAppLoop

    this.setOutput = timerAppSetOutput

    this.setInterval = timerAppSetInterval

    this.sync = timerAppSync

    this.unsync = timerAppUnsync

    // Initialize with specified values

    this.setOutput (output)

    this.setInterval (interval)

    this.start()

}

function clockUpdate () {

    var now = new Date()

    var timeHH = now.getHours();

    var timeMM = now.getMinutes()

    var timeSS = now.getSeconds()

    var msec = now.getTime ()

    var timeSSm = msec - 1000 * Math.floor (msec / 1000)

    timeSSm = '00' + timeSSm

    timeSSm = timeSSm.substring(timeSSm.length-3, timeSSm.length)

    var timeString = ((timeHH < 10) ? '0' : '') + timeHH

                 + ':' + ((timeMM < 10) ? '0' : '') + timeMM

                 + ':' + ((timeSS < 10) ? '0' : '') + timeSS

                 + '.' + timeSSm

    if (this.output) {

        this.output.value = timeString

    } else {

        self.status = timeString

    }

}

function buttons (name, output, interval, increment, bounce, offset) {

    // Initialize with default values

    this.name = name            

    this.output = null          

    this.interval = 1000        

    this.increment = 1          

    this.bounce = 1             

    this.offset = 0

    this.timeout = null

    this.syncCount = 0

    this.syncName = new array ()

    this.syncInterval = new array ()

    this.syncCountdown = new array ()

    // Define object methods

    this.update = buttonsUpdate

    this.start = timerAppStart

    this.stop = timerAppStop

    this.toggle = timerAppToggle

    this.loop = timerAppLoop

    this.setOutput = timerAppSetOutput

    this.setInterval = timerAppSetInterval

    this.sync = timerAppSync

    this.unsync = timerAppUnsync

    this.setIncrement = timerAppSetIncrement

    this.setBounce = timerAppSetBounce

    this.setOffset = timerAppSetOffset

    // Initialize with specified values

    this.setOutput (output)

    this.setInterval (interval)

    this.setIncrement (increment)

    this.setBounce (bounce)

    this.setOffset (offset)

    this.start()

}

function buttonsUpdate () {

    if (this.output) {

        var newOffset = this.offset + this.increment

        if ((newOffset < this.output.length)

            && (newOffset >= 0)) {

            this.offset = newOffset

        } else {

            this.increment *= this.bounce

            if (this.increment >= 0) {

                this.increment = modRange (this.increment, 0, this.output.length-1)

            } else {

                this.increment = 0 - modRange (Math.abs (this.increment),

                                0, this.output.length-1)

            }

            this.offset += this.increment

            this.offset = modRange (this.offset, 0, this.output.length-1)

        }

        this.output[this.offset].checked = true

    }

}

// -- End Hiding Here -->
</script>

<FORM NAME='clock' ACTION=''>

<TABLE BORDER=2><TR><TD>

<FONT SIZE=-2>

<INPUT TYPE='text' NAME='display' SIZE=8



 onFocus='wClock.toggle()'



 onMouseOver='self.status="Click here to turn on/off clock"; return true'>

</FONT>

</TD></TR></TABLE>

</FORM>

<FORM NAME='imastudios'>

<P>

<INPUT TYPE='radio' NAME='buttons'>

        Tick

<INPUT TYPE='radio' NAME='buttons'>

        Tock

<INPUT TYPE='radio' NAME='buttons'>

        Tick

<INPUT TYPE='radio' NAME='buttons'>

        Tock

<INPUT TYPE='radio' NAME='buttons'>

        Tick

</FORM>

</fieldset>

<br><br><br>
          <table width="500" border="0" cellspacing="0" cellpadding="0">
            <tr>
              <td>
                <table width="500" border="0" cellspacing="0" cellpadding="0">
                  <tr> 
                    <td bgcolor="#CCCCCC" width="15" height="16">&nbsp;</td>
                    <td width="96" bgcolor="#000000" height="16"> 
                      <div align="center"><font color="#FFFFFF">脚本说明：</font></div>
                    </td>
                    <td width="389" height="16">&nbsp;</td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr>
              <td class="zf">
                <textarea name="textfield" cols="80" rows="10" class="textfield">脚本说明: 
&nbsp;
第一步:把如下代码加入<body>区域中
&nbsp;&lt;script language=&quot;JavaScript&quot;&gt;
&lt;!-- Hide this script from old browsers --

function modRange (value, min, max) {

    if (min == max) {

        return (min)

    }

    var low = Math.min (min, max)

    var high = Math.max (min, max)

    var range = high - low + 1

    var valOff = parseInt (value) - low

    var mod = range * Math.floor (valOff / range)

    result = low + valOff - mod

    if (result &lt; low) {

        result += high

    }

    if (result &gt; high) {

        result = low

    }

    return (result)

}

function array () {

    this[0] = null

}

function timerAppStart () {

    this.stop ()

    this.loop ()

}

function timerAppStop () {


    clearTimeout (this.timeout)

    this.timeout = null

}

function timerAppToggle () {

    if (this.timeout) {

        this.stop ()

    } else {

        this.start ()

    }

}

function timerAppLoop () {

    this.update ()

    command = this.name + '.loop()'

    for (var i = 0; i &lt; this.syncCount; i++) {

        if (this.syncName[i] != '') {

            if (--this.syncCountdown[i] &lt;= 0) {

                this.syncCountdown[i] = this.syncInterval[i]

                command += ';' + this.syncName[i] + '.update()'

            }

        }

    }

    this.timeout = setTimeout (command, this.interval)

}

function timerAppSetOutput (output) {

    if (! this.output) {

        this.output = output

    }

}

function timerAppSetInterval (interval) {

    if (interval) {

        var newInterval = parseInt (interval)

        if (newInterval &gt; 0) {

            this.interval = newInterval

        } else {

            alert ('Interval value must be a positive number: ' + interval)

        }

    }

}

function timerAppSync (name, interval) {

    if (interval == null) {

        interval = 1

    }

    if (interval &lt;= 0) {

        eval (this.name + '.unsync(&quot;' + name + '&quot;)')

        return

    }

    var newIndex = this.syncCount

    for (var i = 0; i &lt; this.syncCount; i++) {

        if (this.syncName[i] == name) {

            newIndex = i

            break

        }

    }

    if (newIndex == this.syncCount) {

        this.syncCount++

    }

    this.syncInterval[newIndex] = interval

    this.syncCountdown[newIndex] = interval

    this.syncName[newIndex] = name

}

function timerAppUnsync (name) {

    for (var i = 0; i &lt; this.syncCount; i++) {

        if (this.syncName[i] == name) {

            this.syncName[i] = ''

            if (i == (this.syncCount - 1)) {

                this.syncCount--

            }

        }

    }

}

function timerAppSetIncrement (increment) {

    if (increment) {

        var newIncrement = parseInt (increment)

//*Unix only*   if (! isNan (newIncrement)) {

        if (newIncrement != 0) {

            this.increment = newIncrement

        } else {

            alert ('Increment value must be a number: ' + increment)

        }

    }

}

function timerAppSetBounce (bounce) {

    if (bounce) {

        var newBounce = parseInt (bounce)

//*Unix only*   if (! isNan (newBounce)) {

        if (newBounce != 0) {

            this.bounce = newBounce

        } else {

            alert ('Bounce value must be a number: ' + bounce)

        }

    }

}

function timerAppSetOffset (offset) {

    if (offset) {

        var newOffset = parseInt (offset)

        if ((newOffset &gt; 0)

            &amp;&amp; (newOffset &lt;= this.output.length)) {

            this.offset = newOffset

        } else {

            warnMessage = 'Value of offset must be a valid index (0 - '

                        + this.output.length + '): ' + offset

            alert (warnMessage)

        }

    }

}

function clock (name, output, interval) {

    // Initialize with default values

    this.name = name            // object name, needed for setTimeout

    this.output = null          // output area

    this.interval = 1000        // milliseconds

    this.timeout = null

    this.syncCount = 0

    this.syncName = new array ()

    this.syncInterval = new array ()

    this.syncCountdown = new array ()

    // Define object methods

    this.update = clockUpdate

    this.start = timerAppStart

    this.stop = timerAppStop

    this.toggle = timerAppToggle

    this.loop = timerAppLoop

    this.setOutput = timerAppSetOutput

    this.setInterval = timerAppSetInterval

    this.sync = timerAppSync

    this.unsync = timerAppUnsync

    // Initialize with specified values

    this.setOutput (output)

    this.setInterval (interval)

    this.start()

}

function clockUpdate () {

    var now = new Date()

    var timeHH = now.getHours();

    var timeMM = now.getMinutes()

    var timeSS = now.getSeconds()

    var msec = now.getTime ()

    var timeSSm = msec - 1000 * Math.floor (msec / 1000)

    timeSSm = '00' + timeSSm

    timeSSm = timeSSm.substring(timeSSm.length-3, timeSSm.length)

    var timeString = ((timeHH &lt; 10) ? '0' : '') + timeHH

                 + ':' + ((timeMM &lt; 10) ? '0' : '') + timeMM

                 + ':' + ((timeSS &lt; 10) ? '0' : '') + timeSS

                 + '.' + timeSSm

    if (this.output) {

        this.output.value = timeString

    } else {

        self.status = timeString

    }

}

function buttons (name, output, interval, increment, bounce, offset) {

    // Initialize with default values

    this.name = name            

    this.output = null          

    this.interval = 1000        

    this.increment = 1          

    this.bounce = 1             

    this.offset = 0

    this.timeout = null

    this.syncCount = 0

    this.syncName = new array ()

    this.syncInterval = new array ()

    this.syncCountdown = new array ()

    // Define object methods

    this.update = buttonsUpdate

    this.start = timerAppStart

    this.stop = timerAppStop

    this.toggle = timerAppToggle

    this.loop = timerAppLoop

    this.setOutput = timerAppSetOutput

    this.setInterval = timerAppSetInterval

    this.sync = timerAppSync

    this.unsync = timerAppUnsync

    this.setIncrement = timerAppSetIncrement

    this.setBounce = timerAppSetBounce

    this.setOffset = timerAppSetOffset

    // Initialize with specified values

    this.setOutput (output)

    this.setInterval (interval)

    this.setIncrement (increment)

    this.setBounce (bounce)

    this.setOffset (offset)

    this.start()

}

function buttonsUpdate () {

    if (this.output) {

        var newOffset = this.offset + this.increment

        if ((newOffset &lt; this.output.length)

            &amp;&amp; (newOffset &gt;= 0)) {

            this.offset = newOffset

        } else {

            this.increment *= this.bounce

            if (this.increment &gt;= 0) {

                this.increment = modRange (this.increment, 0, this.output.length-1)

            } else {

                this.increment = 0 - modRange (Math.abs (this.increment),

                                0, this.output.length-1)

            }

            this.offset += this.increment

            this.offset = modRange (this.offset, 0, this.output.length-1)

        }

        this.output[this.offset].checked = true

    }

}

// -- End Hiding Here --&gt;
&lt;/script&gt;

&lt;FORM NAME='clock' ACTION=''&gt;

&lt;TABLE BORDER=2&gt;&lt;TR&gt;&lt;TD&gt;

&lt;FONT SIZE=-2&gt;

&lt;INPUT TYPE='text' NAME='display' SIZE=8



 onFocus='wClock.toggle()'



 onMouseOver='self.status=&quot;Click here to turn on/off clock&quot;; return true'&gt;

&lt;/FONT&gt;

&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;

&lt;/FORM&gt;

&lt;FORM NAME='imastudios'&gt;

&lt;P&gt;

&lt;INPUT TYPE='radio' NAME='buttons'&gt;

        Tick

&lt;INPUT TYPE='radio' NAME='buttons'&gt;

        Tock

&lt;INPUT TYPE='radio' NAME='buttons'&gt;

        Tick

&lt;INPUT TYPE='radio' NAME='buttons'&gt;

        Tock

&lt;INPUT TYPE='radio' NAME='buttons'&gt;

        Tick

&lt;/FORM&gt;





&nbsp;
第二步:把如下代码加入<body>区域中<body bgcolor="#ffffff" onLoad='wClock = new clock ("wClock", document.clock.display); wButtons = new buttons ("wButtons", document.imastudios.buttons, 500, 1,-1); wButtons.stop(); wClock.sync ("wButtons", 1)'onUnload='wClock.stop(); wButtons.stop()' bgcolor="#FFFFFF">
</textarea>
              </td>
            </tr>
          </table>
        </div>
      </td>
    </tr>
  </table>
  <hr width="770">
   <table width="770" border="0" cellspacing="0" cellpadding="0" height="21">
    <tr>
      <td bgcolor="#CCCCCC" valign="middle">
        <div align="center"><script language=javascript src=buttom.js></script></div>
      </td>
    </tr>
    <tr>
      <td>
        <div align="center"></div>
      </td>
    </tr>
  </table>
</div>
</body>
</html>
